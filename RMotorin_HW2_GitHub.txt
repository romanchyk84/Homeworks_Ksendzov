https://github.com/romanchyk84

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash
============================================================
JSON
 4. Создать внешний репозиторий c названием JSON.	- Идем на https://github.com/USER_NAME, кликаем на Repositories, затем кликаем зеленую кнопку New, вводим имя репозитория JSON, кликаем зеленую кнопку Create.
 5. Клонировать репозиторий JSON на локальный компьютер.	- $ git clone git@github.com:git_user_name/JSON.git
 6. Внутри локального JSON создать файл “new.json”.	$ touch new.json
 7. Добавить файл под гит.	- $ git add new.json
 8. Закоммитить файл.		- $ git commit -m 'new .json file created'
 9. Отправить файл на внешний GitHub репозиторий.	- $ git push
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.	- $ nano new.json, ввести информацию в формате JSON, нажать CTRL+O, нажать Enter, нажать CTRL+X
 11. Отправить изменения на внешний репозиторий.	- $ git add . && git commit -m 'commit' && git push
 12. Создать файл preferences.json	- $ touch preferences.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON.	- $ nano preferences.json, ввести информацию в формате JSON, нажать CTRL+O, нажать Enter, нажать CTRL+X
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON	- $ touch skills.json
 15. Отправить сразу 2 файла на внешний репозиторий.	- $ git add . && git commit -m '2 new files created' && git push
 16. На веб интерфейсе создать файл bug_report.json.	- войти на веб интерфейсе в репозиторий JSON, кликнуть кнопку Add file > Create new file, ввести имя bug_report.json
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	- проскролить страницу создания файла вниз, ввести коммит, кликнуть кнопку Commit new file.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.	- В веб интерфейсе выбрать репозиторий JSON, затем кликнуть на файле bug_report.json, на открывшейся странице кликнуть пикторамму редактирования (Ручка), затем ввести информацию
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.	- В поле Commit changes ввести комментарий, затем кликнуть Commit changes.
 20. Синхронизировать внешний и локальный репозиторий JSON	- $ git pull
==========================================================

XML
 21. Создать внешний репозиторий c названием XML.
 22. Клонировать репозиторий XML на локальный компьютер.
 23. Внутри локального XML создать файл “new.xml”.
 24. Добавить файл под гит.
 25. Закоммитить файл.
 26. Отправить файл на внешний GitHub репозиторий.
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.
 28. Отправить изменения на внешний репозиторий.
 29. Создать файл preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML
 32. Сделать коммит в одну строку.
 33. Отправить сразу 2 файла на внешний репозиторий.
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML
 ========================================================
 
 TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер.
 3. Внутри локального TXT создать файл “new.txt”.
 4. Добавить файл под гит.
 5. Закоммитить файл.
 6. Отправить файл на внешний GitHub репозиторий.
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 8. Отправить изменения на внешний репозиторий.
 9. Создать файл preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT
 12. Сделать коммит в одну строку.
 13. Отправить сразу 2 файла на внешний репозиторий.
 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT
 ========================================================
 
 script for creating remote repo from local git folder (creating remote repo from CLI)
 
#!/bin/bash
curl -u 'git_user_name:git_token' https://api.github.com/user/repos -d "{\"name\":\"folder_name\"}";
git init;
git remote add origin git@github.com:git_user_name/folder_name.git;
